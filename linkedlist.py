# 연결 리스트란 노드가 데이터와 포인터를 가진 자료구조를 말한다.
# 노드의 포인터는 다음 노드의 주소값을 갖는다.
# Node : 데이터와 포인터로 이루어져있다.
# Pointer : 다음 노드의 주소값을 갖고 있다.
# Head : 연결리스트에서 가장 시작점인 데이터를 의미한다.
# Tail : 연결리스트에서 가장 마지막 데이터를 의미한다.
# Next=None(Null) : 다음 데이터가 없을 경우 포인터의 값은 null이다.

# 장점 : 배열은 미리 데이터 공간을 할당해야 하지만 연결 리스트는 그러지 않아도 되어 유동적으로 데이터 추가, 삭제가 가능하다. 연결리스트는 수정시 O(1)의 시간 복잡도(항상 일정한 시간)를 갖는다.
# 단점 : 저장공간 효율이 좋지 않다. 배열은 인덱스를 통해 데이터에 접근하여 O(1) 시간복잡도를 갖지만 연결 리스트의 경우 O(n)을 갖는다. 이는 연결 된 정보를 찾기 위해 주소를 확인하고 다음 데이터를 탐색하는 시간이 있기 때문에 접근 속도가 느린 것이다.


# Node
class Node:
    def __init__(self, data, next=None):
        self.data = data
        self.next = next

node1 = Node(1)

node2 = Node(3)

node1.next = node2

head = node1

print(node1.next.data)
print(node2.data)
